pipeline {
    agent any

    environment {
        COMPOSE_FILE = "docker-compose.yml"
        CONTAINER_NAME = "cloudcomputingg"   
        MYSQL_CONTAINER = "mysql_web"
        DOCKER_CREDENTIALS = 'dockerhub-credentials'
        REPO_URL = "https://github.com/akanabot/cloudcomptw.git"
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo "Checkout source code"
                git branch: 'main', url: "${REPO_URL}"

                echo "Git safe directory"
                bat 'git config --global --add safe.directory "%cd%"'
            }
        }

        stage('Build Docker Images') {
            steps {
                echo "build image"
                bat """
                docker-compose -f ${COMPOSE_FILE} build
                """
            }
        }

        stage('Run Docker Containers') {
            steps {
                echo "Run Docker Containers"
                bat """
                docker stop ${CONTAINER_NAME} || echo "${CONTAINER_NAME} fail"
                docker rm ${CONTAINER_NAME} || echo "${CONTAINER_NAME} deleted"
                docker stop ${MYSQL_CONTAINER} || echo "${MYSQL_CONTAINER} fail"
                docker rm ${MYSQL_CONTAINER} || echo "${MYSQL_CONTAINER} deleted"

                docker-compose -f ${COMPOSE_FILE} down || exit 0
                docker-compose -f ${COMPOSE_FILE} up -d

                docker ps
                """
            }
        }

        stage('Verify Laravel Running') {
            steps {
                echo "Verify Laravel Running"
                bat """
                ping 127.0.0.1 -n 20 >nul

                curl -I http://127.0.0.1:8000 || echo "fail access laravel port 8000"

                echo ==== CEK ISI HALAMAN LARAVEL ====
                curl http://127.0.0.1:8000 || echo "fail to load laravel"
                """
            }
        }
    }

    post {
        success {
            echo 'laravel running successful'
        }
        failure {
            echo 'failed to run laravel'
        }
        always {
            echo 'clear temporary container'
            bat "docker-compose -f ${COMPOSE_FILE} down"
        }
    }
}
